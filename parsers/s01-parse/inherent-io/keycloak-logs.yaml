filter: evt.Parsed.program == 'keycloak'
onsuccess: next_stage
name: inherent-io/keycloak-logs
description: "Parse keycloak logs"
pattern_syntax:
  DATETIME: "[0-9]+-[0-9]+-[0-9]+ [0-2][0-9]:[0-5][0-9]:[0-5][0-9],[0-9]{3}"
  LOG_LEVEL: "(WARN|ERROR|INFO)"
  VALUE_TO_COMMA: "[^,]+"

  LOGIN_ERROR_DATA: "realmId=%{VALUE_TO_COMMA:realmId}, clientId=%{VALUE_TO_COMMA:clientId}, userId=%{VALUE_TO_COMMA:userId}, ipAddress=%{VALUE_TO_COMMA:ipAddress}, error=%{VALUE_TO_COMMA:error}, auth_method=%{VALUE_TO_COMMA:auth_method}, auth_type=%{VALUE_TO_COMMA:auth_type}, redirect_uri=%{URI:redirect_uri}, code_id=%{VALUE_TO_COMMA:code_id}, username=%{VALUE_TO_COMMA:username}(, authSessionParentId=%{VALUE_TO_COMMA:authSessionParentId}, authSessionTabId=%{VALUE_TO_COMMA:authSessionTabId})?"
  LOGIN_ERROR: "^%{DATETIME:datetime} %{LOG_LEVEL:log_level} [ ]*.+ type\\=LOGIN_ERROR, %{LOGIN_ERROR_DATA}$"
nodes:
  - grok:
      name: "LOGIN_ERROR"
      apply_on: Line.Raw
      statics:
        - meta: log_type
          value: LOGIN_ERROR
        - meta: error
          expression: evt.Parsed.error
        - meta: source_ip
          expression: evt.Parsed.ipAddress
        - meta: username
          expression: evt.Parsed.username
statics:
  - target: evt.StrTime
    expression: evt.Parsed.datetime
  - meta: log_level
    expression: evt.Parsed.log_level
  - target: evt.StrTimeFormat
    value: "2006-01-02 15:04:05,999999999"
